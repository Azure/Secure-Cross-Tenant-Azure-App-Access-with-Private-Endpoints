name: Bicep Validation

on:
  push:
    paths:
      - 'deploy/**/*.bicep'
      - '.github/workflows/bicep-validation.yml'
  pull_request:
    paths:
      - 'deploy/**/*.bicep'
      - '.github/workflows/bicep-validation.yml'

# Security: Limit GITHUB_TOKEN permissions to minimum required
permissions:
  contents: read        # Required to checkout code
  actions: read        # Required to read workflow artifacts

jobs:
  validate-bicep:
    name: Validate Bicep Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Security: Don't persist credentials after checkout
        persist-credentials: false
      
    - name: Setup Bicep CLI
      run: |
        # Security: Download and install Bicep CLI directly from official GitHub releases
        echo "Installing Bicep CLI..."
        
        # Verify we're downloading from the official Azure/bicep repository
        BICEP_URL="https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64"
        echo "Downloading from: $BICEP_URL"
        
        # Download with additional security options
        curl -Lo bicep "$BICEP_URL" \
          --fail \
          --silent \
          --show-error \
          --location \
          --retry 3 \
          --max-time 300
          
        # Verify the download was successful and file is not empty
        if [ ! -s bicep ]; then
          echo "❌ Failed to download Bicep CLI or file is empty"
          exit 1
        fi
        
        # Make executable and move to system path
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep
        
        # Verify installation and show version
        bicep --version
        echo "✅ Bicep CLI installed successfully"
        
    - name: Validate Bicep syntax
      run: |
        echo "Validating Bicep files..."
        
        # Find all .bicep files and validate them
        exit_code=0
        find deploy/ -name "*.bicep" -type f | while read -r bicep_file; do
          echo "Validating: $bicep_file"
          
          # Check syntax and build
          if bicep build "$bicep_file" --stdout > /dev/null 2>validation_output.txt; then
            echo "✅ $bicep_file - Syntax valid"
          else
            echo "❌ $bicep_file - Syntax error"
            cat validation_output.txt
            exit_code=1
          fi
          rm -f validation_output.txt
        done
        
        if [ $exit_code -ne 0 ]; then
          exit 1
        fi
        
        echo "All Bicep files passed validation!"
        
    - name: Validate specific templates
      run: |
        echo "Running detailed validation for main templates..."
        
        # Validate provider.bicep if it exists
        if [ -f "deploy/provider.bicep" ]; then
          echo "Validating provider.bicep..."
          if bicep build deploy/provider.bicep --stdout > /dev/null 2>provider_validation.txt; then
            echo "✅ provider.bicep validated successfully"
          else
            echo "❌ provider.bicep validation failed"
            cat provider_validation.txt
            exit 1
          fi
          rm -f provider_validation.txt
        fi
        
        # Validate consumer.bicep if it exists
        if [ -f "deploy/consumer.bicep" ]; then
          echo "Validating consumer.bicep..."
          if bicep build deploy/consumer.bicep --stdout > /dev/null 2>consumer_validation.txt; then
            echo "✅ consumer.bicep validated successfully"
          else
            echo "❌ consumer.bicep validation failed"
            cat consumer_validation.txt
            exit 1
          fi
          rm -f consumer_validation.txt
        fi
        
        # Validate module files
        if [ -d "deploy/module" ]; then
          echo "Validating module files..."
          find deploy/module/ -name "*.bicep" -type f | while read -r module_file; do
            echo "Validating module: $module_file"
            if bicep build "$module_file" --stdout > /dev/null 2>module_validation.txt; then
              echo "✅ $(basename "$module_file") validated successfully"
            else
              echo "❌ $(basename "$module_file") validation failed"
              cat module_validation.txt
              exit 1
            fi
            rm -f module_validation.txt
          done
        fi
        
    - name: Check for best practices
      run: |
        echo "Checking Bicep best practices..."
        
        echo "Checking for @description decorators on parameters..."
        bicep_files=$(find deploy/ -name "*.bicep" -type f)
        for file in $bicep_files; do
          # Get all parameter names
          params=$(grep "^[[:space:]]*param[[:space:]]" "$file" | sed 's/^[[:space:]]*param[[:space:]]\+\([^[:space:]]*\).*/\1/' || true)
          
          if [ -n "$params" ]; then
            echo "Checking: $file"
            missing_count=0
            
            while IFS= read -r param_name; do
              # Check if this parameter has a @description decorator before it
              param_line=$(grep -n "^[[:space:]]*param[[:space:]]\+$param_name[[:space:]]" "$file" | cut -d: -f1)
              
              if [ -n "$param_line" ]; then
                # Calculate start line (don't go below line 1)
                start_line=$((param_line - 5))
                if [ $start_line -lt 1 ]; then
                  start_line=1
                fi
                end_line=$((param_line - 1))
                
                # Look for @description in the lines before the parameter
                if [ $end_line -ge $start_line ]; then
                  desc_found=$(sed -n "${start_line},${end_line}p" "$file" 2>/dev/null | grep "@description" || true)
                else
                  desc_found=""
                fi
                
                if [ -z "$desc_found" ]; then
                  echo "⚠️  Parameter '$param_name' missing @description decorator"
                  missing_count=$((missing_count + 1))
                fi
              fi
            done <<< "$params"
            
            if [ $missing_count -eq 0 ]; then
              echo "✅ All parameters in $file have @description decorators"
            fi
          fi
        done
        
        echo "Best practices check completed!"
